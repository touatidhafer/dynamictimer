{"version":3,"sources":["component/timer.js","component/display.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","hours","minutes","seconds","Component","Display","onClick","startStopTime","btnName","resetTime","App","_this","interval","setInterval","state","setState","stopTime","clearInterval","timer","display","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdad43ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Timer extends Component {\r\n  constructor(props){\r\n    super(props)\r\n      }\r\n  render() { \r\n       return (\r\n         <div className='main'>\r\n           <div className='timer'>\r\n             {this.props.hours < 10 ? '0' + this.props.hours : this.props.hours}:{this.props.minutes < 10 ? '0' + this.props.minutes : this.props.minutes}:{this.props.seconds < 10 ? '0' + this.props.seconds : this.props.seconds}     \r\n           </div> \r\n           </div>   \r\n   ) ;\r\n  }\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nclass Display extends Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        return(\r\n            <main className='main'>\r\n                <div className='time'>\r\n                    <span className='time-text'>Hours</span>\r\n                    <span className='time-text'>Minutes</span>\r\n                    <span className='time-text'>Seconds</span>\r\n                </div>\r\n                <div className='button'>\r\n                    <button className='btn' onClick={this.props.startStopTime}>{this.props.btnName?'Stop':'Start'}</button>\r\n                    <button className='btn' onClick={this.props.resetTime}>Reset</button>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n   \r\n}\r\nexport default Display;\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport Timer from './component/timer';\nimport Display from './component/display';\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  this.state={\n    seconds: 0,\n    minutes: 0,\n    hours: 0,\n    btnName:false\n  }\n}\ninterval = {}\nTimer = () =>{\n  this.interval=setInterval(()=> {\n    if (this.state.btnName){\n      if (this.state.seconds === 59){\n        this.setState({\n    seconds: 0,\n    minutes: this.state.minutes + 1\n\n       })\n      }else {\n        this.setState({\n          seconds: this.state.seconds + 1\n        })\n      }\n      if (this.state.minutes==59){\n        this.setState({\n          minutes: 0,\n          hours: this.state.hours + 1\n        })\n      }\n    }\n  },1000)\n}\nstopTime = () => {\n\n  this.setState({\n    btnName: !this.state.btnName ,\n  })\n  clearInterval(this.interval) \n}\nstartStopTime = () => {\n  this.stopTime()\n  this.Timer()\n}\nresetTime = () => {\n  this.setState({\n    minutes: 0,\n    hours: 0,\n    seconds: 0\n  })\n}\n  render() { \n    return (\n      <div>\n      <Timer\n       hours={this.state.hours}\n       minutes={this.state.minutes}\n       seconds={this.state.seconds}\n       />\n      \n        <Display\n        resetTime={this.resetTime}\n        startStopTime={this.startStopTime}\n        btnName={this.state.btnName}\n        />\n        \n      </div>\n      \n      );\n     \n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}